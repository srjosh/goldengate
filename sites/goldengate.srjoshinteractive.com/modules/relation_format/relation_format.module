<?php

/**
 * @file
 * Relation endpoints field formatter.
 */



/**
 * Implements hook_field_formatter_info().
 */
function relation_format_field_formatter_info() {
  $info = array(
    'relation_format_simple' => array(
      'label' => t('Endpoints Simple Display'),
      'field types' => array('relation_endpoint'),
    ),
  );
  foreach (entity_get_info() as $entity_type => $data) {
    $info['relation_format_simple']['settings']['view_modes'][$entity_type] = 'default';
  }
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function relation_format_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  switch ($display['type']) {
    case 'relation_format_simple':
      $build[] = _relation_format_field_create_simple_output($items);
      break;
  }
  return $build;
}



/**
 * Helper to create an HTML table representing a relation.
 */
function _relation_format_field_create_simple_output($endpoints) {
  $entity_info = entity_get_info();
  $list_items = array();
  foreach ($endpoints as $delta => $endpoint) {
    $entities = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
    $entity = reset($entities);
    $label = entity_label($endpoint['entity_type'], $entity);
    $uri = entity_uri($endpoint['entity_type'], $entity);
    $list_items[$delta] = l($label, $uri['path'], $uri['options']);
  }
  return array(
    '#markup' => implode(", ", $list_items),
  );
}
